name: Set-up and configure cluster

 

# Manually triggered
on: workflow_dispatch

 

env:
  # For setting AKS context
  RESOURCE_GROUP: '<RESOURCE_GROUP>'
  CLUSTER_NAME: '<CLUSTER_NAME>'

 

  # For locking down Helm version
  HELM_VERSION: '3.4.0'

 

  # For creating imagepullsecret
  DEV_NAMESPACE: '<DEV_NAMESPACE>'
  STAGE_NAMESPACE: '<STAGE_NAMESPACE>'
  REGISTRY_NAME: '<REGISTRY_NAME>'
  REGISTRY_USERNAME: '<REGISTRY_USERNAME>'
  IMAGEPULL_SECET_NAME: '<IMAGEPULL_SECET_NAME>'

 

  # For creating TLS secret
  KEYVAULT_NAME: '<KEYVAULT_NAME>'
  ACR_CERTIFICATE_NAME: '<ACR_CERTIFICATE_NAME>'
  ACR_PRIVATEKEY_NAME: '<ACR_PRIVATEKEY_NAME>'
  TLS_SECRET_NAME: '<TLS_SECRET_NAME>'
  INGRESS_NAMESPACE: '<INGRESS_NAMESPACE>'

 

  # For deploying Dynatrace
  DYNATRACE_NAMESPACE: '<DYNATRACE_NAMESPACE>'

 

jobs:
  create_k8s_resources:
    runs-on: self-hosted

 

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

 

    # Sets the AKS context with credentials
    - name: Setting AKS set context  
      uses: azure/aks-set-context@v1
      with:
        creds: ${{ secrets.AZURE_DEPLOY_CREDENTIALS }}
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}

 

    # Login to Azure with the appropriate credentials
    - name: Login
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_DEPLOY_CREDENTIALS }} 
    
    # Create namespaces
    - name: Create namespaces
      run: |
        kubectl apply -f ${{ github.workspace }}/k8s/namespaces/dev-namespace.yaml
        kubectl apply -f ${{ github.workspace }}/k8s/namespaces/stage-namespace.yaml
        kubectl apply -f ${{ github.workspace }}/k8s/namespaces/ingress-nginx-namespace.yaml
        kubectl apply -f ${{ github.workspace }}/k8s/namespaces/dynatrace-namespace.yaml

 

    # Download TLS Certificate and Key from Keyvault
    - name: Download TLS Certificate and key
      run: |
        az keyvault secret download --name ${{ env.ACR_CERTIFICATE_NAME }} --vault-name ${{ env.KEYVAULT_NAME }} -f certificate.crt
        az keyvault secret download --name ${{ env.ACR_PRIVATEKEY_NAME }} --vault-name ${{ env.KEYVAULT_NAME }} -f privatekey.key
    
    # Create TLS secret for Ingress
    - name: Create TLS Secret
      run: |
        kubectl delete secret ${{ env.TLS_SECRET_NAME }} --ignore-not-found -n ${{ env.INGRESS_NAMESPACE }}
        kubectl create secret tls ${{ env.TLS_SECRET_NAME }} --cert=certificate.crt --key=privatekey.key -n ${{ env.INGRESS_NAMESPACE }}
    
    # Create ImagePullSecret for Dev environment
    - name: Create ImagePullSecret for dev
      uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.DEV_NAMESPACE }}
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ env.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_SECRET }} # ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.IMAGEPULL_SECET_NAME }}

 

    # Create ImagePullSecret for Stage environment
    - name: Create ImagePullSecret for stage
      uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.STAGE_NAMESPACE }}
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ env.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_SECRET }} # ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.IMAGEPULL_SECET_NAME }}
  
    # Create ingress resources
    - name: Create Ingress resource
      run: |
        kubectl apply -f ${{ github.workspace }}/k8s/ingress/ingress-dev.yaml
        kubectl apply -f ${{ github.workspace }}/k8s/ingress/ingress-stage.yaml

 


    # Create rolebindings for dev and admin access through RBAC
    - name: Create rolebindings for AAD/RBAC
      run: |
        kubectl apply -f ${{ github.workspace }}/k8s/roles/role-bindings/admin-azure-ad-binding.yaml
        kubectl apply -f ${{ github.workspace }}/k8s/roles/role-bindings/dev-azure-ad-binding.yaml
        
  deploy_cluster_charts:
    needs: create_k8s_resources
    runs-on: self-hosted

 

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

 

    # Sets the AKS context with credentials
    - name: Setting AKS set context  
      uses: azure/aks-set-context@v1
      with:
        creds: ${{ secrets.AZURE_DEPLOY_CREDENTIALS }}
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}

 

    # Setup Helm
    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: ${{ env.HELM_VERSION }}
    
    # Install Nginx Ingress Controller 
    - name: Install nginx ingress controller
      run: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update
        helm upgrade --install nginx-ingress-controller ingress-nginx/ingress-nginx \
          --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-internal"=true \
          --set controller.replicaCount=2 \
          --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
          --set controller.service.loadBalancerIP="" \
          --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
          --version 3.8.0 --namespace ${{ env.INGRESS_NAMESPACE }}
           
    # Install DynatraceOne Agent Operator
    - name: Install Dynatrace
      run: |
        helm repo add dynatrace 
        helm upgrade --install \
          dynatrace-oneagent-operator dynatrace/dynatrace-oneagent-operator \
          --set secret.apiToken=${{ secrets.DYNATRACE_API_TOKEN }} \
          --set secret.paasToken=${{ secrets.DYNATRACE_PAAS_TOKEN }} \
          --namespace ${{ env.DYNATRACE_NAMESPACE }} --values ${{ github.workspace }}/charts/dynatrace/values.yaml --version 0.8.2